<script data-require="jquery@3.1.1" data-semver="3.1.1"
    src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .left {
        text-align: left;
    }
</style>

<div class="row">
    <div class="col-2">
        <!-- Tab navs -->
        <div class="nav flex-column nav-tabs text-center" id="v-tabs-tab" role="tablist" aria-orientation="vertical">
            <a class="nav-link active left" id="v-tabs-home-tab" data-mdb-toggle="tab" href="#restaurantActivity"
                role="tab" aria-controls="restaurantActivity" aria-selected="true">Restaurant Activity <i
                    class="fas fa-chart-line"></i></a>
            <a class="nav-link left" id="v-tabs-profile-tab" data-mdb-toggle="tab" href="#promotions" role="tab"
                aria-controls="promotions" aria-selected="false">Promotions <i class="fas fa-percentage"></i></a>
            <a class="nav-link left" id="v-tabs-profile-tab" data-mdb-toggle="tab" href="#orders" role="tab"
                aria-controls="orders" aria-selected="false">Orders Per Food <i class="fas fa-hamburger"></i></a>
            <a class="nav-link left" id="v-tabs-messages-tab" data-mdb-toggle="tab" href="#Income" role="tab"
                aria-controls="Income" aria-selected="false">Earnings <i class="fas fa-dollar-sign"></i></a>
        </div>
        <!-- Tab navs -->
    </div>

    <div class="col-10">
        <!-- Tab content -->
        <div class="tab-content" id="v-tabs-tabContent">
            <div class="tab-pane fade show active" id="restaurantActivity" role="tabpanel"
                aria-labelledby="restaurantActivity">
                <p style="text-align: left;">Restaurant Activity <span>2021</span></p>
                <hr>
                <div class="row">
                    <div class="col-11"><canvas id="myChart"></canvas></div>
                    <div class="col-1">
                        <div>Year</div>
                        <hr>
                        <div class="btn-group-vertical" role="group" aria-label="Vertical button group" id="yearSelect">
                            <input type="radio" class="btn-check" name="year" id="all" autocomplete="off" value="all"
                                checked />
                            <label class="btn btn-warning" for="all">All</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="promotions" role="tabpanel" aria-labelledby="promotions">
                <div class="row">
                    <canvas id="promoChart"></canvas>
                </div>
                <div class="row" style="margin-top: 10px;">
                    <div class=" promolist">
                        <div style="margin-top: 10px;">Popular Promotions</div>
                        <ol class="list-group list-group-flush list-group-numbered">
                            <li class="list-group-item"></li>
                            <li class="list-group-item"></li>
                            <li class="list-group-item"></li>
                            <li class="list-group-item"></li>
                            <li class="list-group-item"></li>
                        </ol>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders">
                <legend id="ordersTitle" style="text-align: left;"></legend>
                <hr>
                <div class="row" style="margin-top: 25px;">
                    <div class="col-md-9">
                        <div class=" menuGraph">
                            <canvas id="orderChart"></canvas>
                        </div>
                        <div class=" menuSubGraph">
                            <div id="graphSubTitle">Top 5 ordered food</div>
                            <ol class="list-group list-group-flush list-group-numbered">
                                <li class="list-group-item"></li>
                                <li class="list-group-item"></li>
                                <li class="list-group-item"></li>
                                <li class="list-group-item"></li>
                                <li class="list-group-item"></li>
                            </ol>
                        </div>
                    </div>
                    <div class="col-md-3">

                        <div class=" menuSubGraph">
                            <div id="graphSubTitle">Type Picker</div>
                            <select class="form-select typePicker" aria-label="Default select example">
                                <option value="">All Types</option>
                                {{#each types}}
                                <option value="{{this}}">{{this}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="Income" role="tabpanel" aria-labelledby="Income">
                <legend id="incomeTitle" style="text-align: left;"></legend>
                <hr>
                <div class="row" style="margin-top: 25px;">
                    <div class="col-md-9">
                        <div class=" menuGraph">
                            <canvas id="incomeChart"></canvas>
                        </div>
                        <div class=" menuSubGraph" style=" border:1px solid grey;">
                            <div id="graphSubTitle" style="text-align: center; margin-bottom:0px;">Total Earnings</div>
                            <div id="totalEarnings" style="font-weight:600; font-size:3.0em; text-align:center;"></div>
                        </div>
                    </div>
                    <div class="col-md-3">

                        <div class=" menuSubGraph">
                            <div id="graphSubTitle">Year & Month Picker</div>
                            <select class="form-select yearPicker" aria-label="Default select example">
                                <option value="">All Year</option>
                                <option value="2021">2021</option>
                                <option value="2022">2022</option>
                                <option value="2023">2023</option>
                            </select>
                            <select style="margin-top:20px;" class="form-select monthPicker"
                                aria-label="Default select example">
                                <option value="">Whole Year</option>
                                <option value="Jan">January</option>
                                <option value="Feb">February</option>
                                <option value="Mar">March</option>
                                <option value="Apr">April</option>
                                <option value="May">May</option>
                                <option value="Jun">June</option>
                                <option value="Jul">July</option>
                                <option value="Aug">August</option>
                                <option value="Sep">September</option>
                                <option value="Oct">October</option>
                                <option value="Nov">November</option>
                                <option value="Dec">December</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Tab content -->
    </div>
</div>

<script>
    //edison
    var orderChart, incomeChart;
    $(function () {
        fetch('/menu/getStatData', {
            headers: {
                "Content-Type": "application/json"
            },
        })
            .then(response => {
                return response.json();
            })
            .then(data => {
                console.log(data)
                $('#ordersTitle').text('Number of orders for each food in all types');
                $('#incomeTitle').text('Money earned montly in all years');
                if (data.empty) {
                    const labels = data.menus.map(f => f.name);
                    const dataStat = {
                        labels: labels,
                        datasets: [{
                            label: 'Orders',
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(255, 205, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(201, 203, 207, 0.2)'
                            ],
                            borderColor: [
                                'rgb(255, 99, 132)',
                                'rgb(255, 159, 64)',
                                'rgb(255, 205, 86)',
                                'rgb(75, 192, 192)',
                                'rgb(54, 162, 235)',
                                'rgb(153, 102, 255)',
                                'rgb(201, 203, 207)'
                            ],
                            borderWidth: 1,
                            data: [],
                        }]
                    };
                    const config = {
                        type: 'bar',
                        data: dataStat,
                        options: {
                            scale: {
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    };
                    orderChart = new Chart(
                        document.getElementById('orderChart'),
                        config
                    );
                    const dataStat2 = {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [{
                            label: 'Earnings',
                            backgroundColor: '#ffb03b',
                            borderColor: '#ffb03b',
                            data: [],
                        }]
                    };
                    const config2 = {
                        type: 'line',
                        data: dataStat2,
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    };
                    incomeChart = new Chart(
                        document.getElementById('incomeChart'),
                        config2
                    );

                } else {
                    console.log(data);
                    const labels = data.menus.map(f => f.name);
                    const orderList = [];
                    for (i = 0; i < data.orders.length; i++) {
                        for (j = 0; j < data.orders[i].food.length; j++) {
                            for (k = 0; k < data.orders[i].food[j].orders.length; k++) {
                                for (l = 0; l < parseInt(data.orders[i].food[j].orders[k].quantity); l++) {
                                    orderList.push(data.orders[i].food[j].id);
                                }
                            }
                        }
                    }
                    const dataList = []
                    data.menus.forEach((menu) => {
                        if (orderList.indexOf(menu.id.toString()) >= 0) {
                            dataList.push(orderList.filter(n => n == menu.id).length);
                        } else {
                            dataList.push(0)
                        }
                    })
                    console.log(dataList)
                    const dataStat = {
                        labels: labels,
                        datasets: [{
                            label: 'Orders',
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(255, 205, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(201, 203, 207, 0.2)'
                            ],
                            borderColor: [
                                'rgb(255, 99, 132)',
                                'rgb(255, 159, 64)',
                                'rgb(255, 205, 86)',
                                'rgb(75, 192, 192)',
                                'rgb(54, 162, 235)',
                                'rgb(153, 102, 255)',
                                'rgb(201, 203, 207)'
                            ],
                            borderWidth: 1,
                            data: dataList,
                        }]
                    };
                    const config = {
                        type: 'bar',
                        data: dataStat,
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    position: 'left',
                                    font: { weight: 'bold', size: 20 },
                                    text: 'Number of orders for each food in all types'
                                }
                            },
                            scale: {
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    };
                    orderChart = new Chart(
                        document.getElementById('orderChart'),
                        config
                    );
                    const dataList2 = []
                    for (i = 1; i < 13; i++) {
                        dataList2.push((data.orders.filter(f => f.date.substr(0, 4) == '2021' && parseInt(f.date.substr(5, 2)) == i)).reduce((x, y) => {
                            return x + y.total
                        }, 0));
                    }
                    const dataStat2 = {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [{
                            label: 'Earnings',
                            backgroundColor: '#ffb03b',
                            borderColor: '#ffb03b',
                            data: dataList2,
                        }]
                    };
                    const config2 = {
                        type: 'line',
                        data: dataStat2,
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    position: 'left',
                                    font: { weight: 'bold', size: 20 },
                                    text: 'Money earned montly in 2021'
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    };
                    incomeChart = new Chart(
                        document.getElementById('incomeChart'),
                        config2
                    );
                    data.topMenu.forEach((food, i) => {
                        $('.menuSubGraph .list-group .list-group-item').eq(i).text(`${food.name} ---> ${food.count} sold`);
                    });
                    $("#totalEarnings").text(`$${data.total}`);
                }
            })
            .catch(err => console.error(err));

        // xuan wei
        var promoChart;
        fetch('/createPromotions/createPromotions/promoStats', {
            headers: {
                "Content-Type": "application/json"
            },
        })
            .then(response => {
                console.log(response);
                return response.json();
            })
            .then(data => {
                console.log(data)
                const labels = data.promotions.map(p => p.name);
                const count = data.promotions.map(p => p.counter);
                const dataset = {
                    labels: labels,
                    datasets: [
                        {
                            label: "Clicks",
                            data: count,
                            borderColor: "#ffb03b",
                            backgroundColor: "#ffb03b",
                        }]
                };

                const config = {
                    type: 'bar',
                    data: dataset,
                    options: {
                        responsive: true,
                        scale: {
                            ticks: {
                                precision: 0
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Number of bookings created'
                            }
                        }
                    },
                };



                promoChart = new Chart(
                    document.getElementById('promoChart'),
                    config
                );

                data.promotions.sort((first, second) => second.counter - first.counter)
                data.promotions.forEach((promotions, i) => {
                    $('.promolist .list-group .list-group-item').eq(i).text(`${promotions.name} - ${promotions.counter} Bookings`);
                });
            })
            .catch(err => console.error(err));

        // wye keong
        fetch("/staffRestaurant/getTblData")
            .then((res) => {
                return res.json();
            })
            .then((data) => {
                let years = [];
                let queueData = [];
                let occupyData = [];
                for (i = 0; i < data.length; i++) {
                    if (!years.includes(data[i].dateTime.slice(0, 4))) {
                        years.push(data[i].dateTime.slice(0, 4))
                    }
                }
                for (i = 0; i < years.length; i++) {
                    $('#yearSelect').append(`<input type="radio" class="btn-check" name="year" id="${years[i]}" autocomplete="off" value="${years[i]}"
                                />
                            <label class="btn btn-warning" for="${years[i]}">${years[i]}</label>`)
                }
                console.log(data)
                for (i = 1; i <= 12; i++) {
                    avgQueue = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).reduce((a, b) => (a + b.queue), 0);
                    avgOccupancy = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).reduce((a, b) => (a + b.occupiedCount), 0);
                    if (avgQueue != 0) {
                        avgQueue = avgQueue / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).length
                    }
                    if (avgOccupancy != 0) {
                        avgOccupancy = avgOccupancy / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).length
                    }
                    queueData.push(avgQueue);
                    occupyData.push(avgOccupancy);
                }
                let popChart = new Chart(document.getElementById("myChart").getContext("2d"), {
                    type: "line",
                    data: {
                        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        datasets: [
                            {
                                label: "Avg Table Occupancy Per Day",
                                data: occupyData,
                                borderColor: [
                                    'rgb(255, 99, 132)',
                                    'rgb(255, 159, 64)',
                                    'rgb(255, 205, 86)',
                                    'rgb(75, 192, 192)',
                                    'rgb(54, 162, 235)',
                                    'rgb(153, 102, 255)',
                                    'rgb(201, 203, 207)'
                                ],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(255, 159, 64, 0.2)',
                                    'rgba(255, 205, 86, 0.2)',
                                    'rgba(75, 192, 192, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(153, 102, 255, 0.2)',
                                    'rgba(201, 203, 207, 0.2)'
                                ],
                            },
                            {
                                label: "Avg Queue Per Day",
                                data: queueData,
                                borderColor: [
                                    'rgb(255, 99, 132)',
                                    'rgb(255, 159, 64)',
                                    'rgb(255, 205, 86)',
                                    'rgb(75, 192, 192)',
                                    'rgb(54, 162, 235)',
                                    'rgb(153, 102, 255)',
                                    'rgb(201, 203, 207)'
                                ],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(255, 159, 64, 0.2)',
                                    'rgba(255, 205, 86, 0.2)',
                                    'rgba(75, 192, 192, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',
                                    'rgba(153, 102, 255, 0.2)',
                                    'rgba(201, 203, 207, 0.2)'
                                ],
                            }
                        ]
                    },
                    options: {}
                })
                $("#yearSelect").change(() => {
                    selectedYear = $('input[name="year"]:checked').val();
                    queueData = []
                    occupyData = []
                    if (selectedYear == "all") {
                        for (i = 1; i <= 12; i++) {
                            avgQueue = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).reduce((a, b) => (a + b.queue), 0);
                            avgOccupancy = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).reduce((a, b) => (a + b.occupiedCount), 0);
                            if (avgQueue != 0) {
                                avgQueue = avgQueue / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).length
                            }
                            if (avgOccupancy != 0) {
                                avgOccupancy = avgOccupancy / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i).length
                            }
                            queueData.push(avgQueue);
                            occupyData.push(avgOccupancy);
                        }
                    } else {
                        for (i = 1; i <= 12; i++) {
                            avgQueue = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i && a.dateTime.slice(0, 4) == selectedYear).reduce((a, b) => (a + b.queue), 0);
                            avgOccupancy = data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i && a.dateTime.slice(0, 4) == selectedYear).reduce((a, b) => (a + b.occupiedCount), 0);
                            if (avgQueue != 0) {
                                avgQueue = avgQueue / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i && a.dateTime.slice(0, 4) == selectedYear).length
                            }
                            if (avgOccupancy != 0) {
                                avgOccupancy = avgOccupancy / data.filter(a => parseInt(a.dateTime.slice(5, 7)) == i && a.dateTime.slice(0, 4) == selectedYear).length
                            }
                            queueData.push(avgQueue);
                            occupyData.push(avgOccupancy);
                        }
                    }
                    console.log(occupyData)
                    popChart.data.datasets[0].data = occupyData;
                    popChart.data.datasets[1].data = queueData;
                    popChart.update()
                })


            })
    })

    function graph1(type) {
        fetch('/menu/getStatData', {
            headers: {
                "Content-Type": "application/json"
            },
        })
            .then(response => {
                return response.json();
            })
            .then(data => {
                const labels = type == '' ? data.menus.map(f => f.name) : data.menus.filter(d => d.type == type).map(f => f.name);
                const orderList = [];
                for (i = 0; i < data.orders.length; i++) {
                    for (j = 0; j < data.orders[i].food.length; j++) {
                        for (k = 0; k < data.orders[i].food[j].orders.length; k++) {
                            for (l = 0; l < parseInt(data.orders[i].food[j].orders[k].quantity); l++) {
                                orderList.push(data.orders[i].food[j].id);
                            }
                        }
                    }
                }
                console.log(orderList)
                const dataList = []
                data.menus.forEach((menu) => {
                    if (type != '') {
                        if (menu.type == type) {
                            if (orderList.indexOf(menu.id.toString()) >= 0) {
                                dataList.push(orderList.filter(n => n == menu.id).length);
                            } else {
                                dataList.push(0)
                            }
                        }
                    } else {
                        if (orderList.indexOf(menu.id.toString()) >= 0) {
                            dataList.push(orderList.filter(n => n == menu.id).length);
                        } else {
                            dataList.push(0)
                        }
                    }
                })
                console.log(dataList)
                orderChart.data.labels = labels;
                orderChart.data.datasets[0].data = dataList;
                orderChart.update();
                $('#ordersTitle').text(`Number of orders for each food in ${type == '' ? 'all types' : type+ ' type'}`);
            })
            .catch(err => console.error(err));
    }

    function graph3(year, month) {
        fetch('/menu/getStatData', {
            headers: {
                "Content-Type": "application/json"
            },
        })
            .then(response => {
                return response.json();
            })
            .then(data => {
                const dataList2 = []
                const monthdays = { 'Jan': 31, 'Feb': 28, "Mar": 31, 'Apr': 30, 'May': 31, 'Jun': 30, 'Jul': 31, 'Aug': 31, 'Sep': 30, 'Oct': 31, 'Nov': 30, 'Dec': 31 }
                var days = []
                if (month != '') {
                    if (year != '') {
                        for (i = 1; i < monthdays[month] + 1; i++) {
                            days.push(i)
                            dataList2.push((data.orders.filter(f => f.date.substr(0, 4) == year && parseInt(f.date.substr(5, 2)) == Object.keys(monthdays).indexOf(month) + 1 && parseInt(f.date.substr(8, 2)) == i)).reduce((x, y) => {
                                return x + y.total
                            }, 0));
                        }
                    } else {
                        for (i = 1; i < monthdays[month] + 1; i++) {
                            days.push(i)
                            dataList2.push((data.orders.filter(f => parseInt(f.date.substr(5, 2)) == Object.keys(monthdays).indexOf(month) + 1 && parseInt(f.date.substr(8, 2)) == i)).reduce((x, y) => {
                                return x + y.total
                            }, 0));
                        }
                    }
                } else {
                    if (year != '') {
                        days = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        for (i = 1; i < 13; i++) {
                            dataList2.push((data.orders.filter(f => f.date.substr(0, 4) == year && parseInt(f.date.substr(5, 2)) == i)).reduce((x, y) => {
                                return x + y.total
                            }, 0));
                        }
                    } else {
                        days = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        for (i = 1; i < 13; i++) {
                            dataList2.push((data.orders.filter(f => parseInt(f.date.substr(5, 2)) == i)).reduce((x, y) => {
                                return x + y.total
                            }, 0));
                        }
                    }
                }
                year = year == '' ? 'all year' : year;
                incomeChart.data.datasets[0].data = dataList2;
                incomeChart.data.labels = days;
                incomeChart.update();
                $('#incomeTitle').text(days.length === 12 ? `Money earned monthly in ${year}` : `Money earned during ${month} in ${year}`);
            })
            .catch(err => console.error(err));
    }

    $('.typePicker').on('change', () => {
        graph1($('.typePicker').val())
    });

    $('.monthPicker').on('change', () => {
        graph3($('.yearPicker').val(), $('.monthPicker').val())
    });

    $('.yearPicker').on('change', () => {
        graph3($('.yearPicker').val(), $('.monthPicker').val())
    });


</script>
